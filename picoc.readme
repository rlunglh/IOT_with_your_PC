Running picoc (C Language Interpreter) on the Wemos D1Mini

Download picoc.bin, blank_config.bin, and rboot.bin from here
Get a flasher for the ESP8266 such as the one available at https://github.com/nodemcu/nodemcu-flasher

flash rboot.bin to the D1Mini at address 0x0000
flash blank_config.bin to address 0x1000
flash picoc.bin to address 0x2000

optionally install Termite from https://www.compuphase.com/software/termite-3.4.zip
if you want to use Termite which supports command history and autocomplete along with function key and 
processor reset functions also pull Upload.flt and Termite.ini from here and put them into the Termite program location 

Connect a Serial Terminal to the D1Mini with baud=115200
Reset the D1Mini and you should see a picoc> prompt

As a test enter printf("%f\n",sqrt(2.0)); {Enter] at the prompt and you should see
1.414214
picoc> 

you can enter and execute statements interactively at the prompt

you can also enter function definitions in the interpreter by editing files and
then #include the file. As an example use sendToFile(filename); to set the file contents

picoc> sendToFile("test.c");
void main()
{
int i;
for (i=0;i<10;i++) printf("%d\r",i+1);
}
<<<
picoc> #include "test.c"
   1 void main()
   2 {
   3 int i;
   4 for (i=0;i<10;i++) printf("%d\r
   5 ",i+1);
   6 }
picoc> main();
1
2
3
4
5
6
7
8
9
10
picoc> 

Added Function Summary
The following function have been added to picoc to support ESP8266 Arduino like functions
picoc> defs();
 int analogRead();          // Arduino equiv funcion no args since always reads A0
void analogWrite(int,float);// Adruino equiv function analogWrite(pin,value); value is float form 0 to 1
void cat(char *,int);       // list file, arg2=1 shows line numbers
void clearBkp(char *,int);  // Clear Breakpoint
void delay(int);            // Arduino equiv delay(milliseconds);
void digitalWrite(int,int); // Arduino equiv digitalWrite(pin,value);
 int digitalRead(int);      // Arduino equiv int analogRead(pin);
void drop(char *);          // delete a function or variable
void get(char *);           // load a file into spiffs from web server
void heap(void);            // show free heap
void listSrc(void);         // list current source
void ls(void);              // print spiffs directory listing
void pinMode(int,char *);   // Arduino equiv pinMode(["OUTPUT","INPUT","INPUT_PULLUP"
void pwmInit(int,...);      // PWM init arg1=freq in Hz, additional args indicate each pin to use for PWM
void pwmServo(int,float);   // set PWM on time to for pin to float value msec
void restart();             // restart the picoc interpreter
void SDB(int);              // SetDebugMode 1==doing Debug
void sendToFile(char *);    // Send console entered text to specified file in SPIFFS
void servoAngle(int,float); // set PWM on time to value corresponding to float angle value
void setBkp(char *,int);    // Set Breakpoint
void speed(int);            // set CPU freq, either 80 or 160
 int sysTime();             // get time since boot in 1/100th secs
picoc>



	